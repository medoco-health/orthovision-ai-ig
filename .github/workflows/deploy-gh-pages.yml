name: Deploy FHIR IG to GitHub Pages

on:
  push:
    branches:
      - main  # Git flow: only deploy from main (production)
  workflow_dispatch:  # Manual trigger for testing

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install SUSHI
        run: npm install -g fsh-sushi

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.6'
          bundler-cache: false

      - name: Install Jekyll
        run: |
          gem install jekyll bundler

      - name: Cache IG Publisher
        uses: actions/cache@v3
        with:
          path: |
            src/input-cache
          key: ${{ runner.os }}-ig-publisher-${{ hashFiles('src/ig.ini') }}
          restore-keys: |
            ${{ runner.os }}-ig-publisher-

      - name: Download/Update IG Publisher
        working-directory: src
        run: |
          chmod +x _updatePublisher.sh
          # Force yes to update, no to snapshot
          printf "Y\nn\n" | ./_updatePublisher.sh || true
          # Verify publisher was downloaded
          if [ ! -f "input-cache/publisher.jar" ]; then
            echo "Failed to download publisher, trying direct download..."
            mkdir -p input-cache
            curl -L https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar -o input-cache/publisher.jar
          fi

      - name: Build FHIR IG
        working-directory: src
        run: |
          chmod +x _genonce.sh
          ./_genonce.sh

      - name: Check build output
        run: |
          if [ ! -d "src/output" ]; then
            echo "Error: Build output directory not found"
            exit 1
          fi
          if [ ! -f "src/output/index.html" ]; then
            echo "Error: index.html not found in output"
            exit 1
          fi
          echo "âœ… Build successful, ready for deployment"
          echo "ðŸ“Š Output directory contains:"
          ls -la src/output/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'src/output'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
